worker_processes  1;

error_log error.log debug;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    # error_log error.log info;
    lua_package_path '/usr/local/Cellar/luarocks/3.3.1/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/local/lib/lua/5.1/?.lua;/usr/local/lib/lua/5.1/?/init.lua;./?.lua;./?/init.lua;/Users/gucchi/.luarocks/share/lua/5.1/?.lua;/Users/gucchi/.luarocks/share/lua/5.1/?/init.lua;;';
    lua_package_cpath '/usr/local/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so;./?.so;/Users/gucchi/.luarocks/lib/lua/5.1/?.so;;';

    upstream web {
        server localhost:8080;
    }

    lua_shared_dict worker_events 8m;
    lua_shared_dict test_shm 8m;

    init_worker_by_lua_block {
       local ev = require "resty.worker.events"
       local ok, err = ev.configure {
       	  shm = "worker_events",
       	  interval = 1
       }
       if not ok then
       	  ngx.log(ngx.ERR, "configure error")
       end

       local healthcheck = require("resty.healthcheck")
       local checker = healthcheck.new({
	     name = "testing",
	     shm_name = "test_shm",
	     checks = {
		active = {
		   type = "http",
		   http_path = "/",
		   healthy = {
		      interval = 2,
		      successes = 1,
		   },
		   unhealthy = {
		      interval = 1,
		      http_failures = 2,
		   }
		}
	     }
       })
       ok, err = checker:add_target("127.0.0.1", 8000, "localhost", false)
       if not ok then
       	  ngx.log(ngx.ERR, err)
       end

       local handler = function(target, event, source, source_PID)
	  local t = target.ip .. ":" .. target.port .." by name '" ..
	     target.hostname .. "' "
	  if event == checker.events.remove then
	     print(t .. "has been removed")
	  elseif event == checker.events.healthy then
	     print(t .. "is now healthy")
	  elseif event == checker.events.unhealthy then
	     print(t .. "is now unhealthy")
	  end
       end
       ok, err = ev.register(handler, checker.EVENT_SOURCE)
       if not ok then
       	  ngx.log(ngx.ERR, err)
       end
    }

    server {
        listen       80;
        server_name  localhost;

        location /status {
            default_type text/plain;
            content_by_lua_block {
	       local healthcheck = require("resty.healthcheck")
	       local checker = healthcheck.new({
		     name = "testing",
		     shm_name = "test_shm"
	       })
	       local status, err = checker:get_target_status("127.0.0.1", 8000, "localhost")
	       if status then
		  ngx.print("healthy")
	       else
		  ngx.print("unhealthy")
	       end
	       if err then
		  print(err)
	       end
            }
        }

	location /stop {
            default_type text/plain;
            content_by_lua_block {
	       local healthcheck = require("resty.healthcheck")
	       local checker = healthcheck.new({
		     name = "testing",
		     shm_name = "test_shm"
	       })
	       local ok, err = checker:remove_target("127.0.0.1", 8000, "localhost")
	       if not ok then
		  ngx.print(err)
	       else
		  ngx.print("stop")
	       end
            }
	}
	
        location = /start {
            default_type text/plain;
            content_by_lua_block {
	       local healthcheck = require("resty.healthcheck")
	       local checker = healthcheck.new({
		     name = "testing",
		     shm_name = "test_shm"
	       })
	       local ok, err = checker:add_target("127.0.0.1", 8000, "localhost", false)
	       if not ok then
		  ngx.print(err)
	       else
		  ngx.print("start")
	       end
            }
	}
        
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
	}
    }
}
